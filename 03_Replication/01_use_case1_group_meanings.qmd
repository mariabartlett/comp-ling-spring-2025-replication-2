---
title: "Replication Code: A Replication of _Embedding Regression: Models for Context-Specific Description and Inference_ (Rodriguez et al., 2023)"
subtitle: "Replicate framework use case 1"
author: "Bridgette Sullivan & Maria Bartlett"
date: "`r Sys.Date()`"
format: html
theme: litera
toc: TRUE
toc-location: left
toc-depth: 7
embed-resources: TRUE
linkcolor: "black"
editor: visual
fontsize: 12pt
css: bootstrap.css
page-layout: full
---

### Set-up

```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE

# clear global environment
rm(list = ls())

# set seed
set.seed(12345)

# provide instruction for how to install user-written packages
#devtools::install_github("prodriguezsosa/conText")

# load packages
library(tidyverse)
library(conText)
library(quanteda)
library(kableExtra)

# set processing/display options
options(mc.cores = parallel::detectCores())
options(dplyr.summarise.inform = FALSE)
options(warn = -1)

# set relative paths
root       <- file.path(getwd() %>% dirname())
author_rep <- file.path(root,"02_DataverseMaterials","dataverse_files")

# define kable styling options
kable_style <- function(df) {
  
  df %>%
  kbl(full_width = T, 
      align = "l",
      booktabs = T) %>%
  kable_styling(latex_options = c("repeat_header","scale_down","HOLD_position")) 
}

```

### Load data

```{r }
#| warning: false
#| output: asis
#| code-fold: false

# corpus
cr <- readRDS(file.path(author_rep,"data","corpus_daily.rds")) %>%
  filter(session_id %in% 111:114 & party %in% c('D', 'R')) %>%
  select(speech, party, gender) %>%
  mutate(speech = tolower(iconv(speech, from = "latin1", to = "UTF-8"))) %>%
  distinct(speech, .keep_all = TRUE) %>% tidyr::drop_na() %>%
  select(speech, party, gender)

# quanteda corpus
cr_corpus <- corpus(cr$speech, docvars = data.frame(party = cr$party, gender = cr$gender))

# pre-trained GloVe embeddings 
pre_trained <- readRDS(file.path(author_rep,"data","stanford-glove","glove.rds"))

# confirm GloVe is comprised of 300-dimension embeddings for 400,000 tokens
stopifnot(nrow(pre_trained) == 400000 & ncol(pre_trained) == 300)
 
# pre-trained transformation matrix (A_hat)
transform_matrix <- readRDS(file.path(author_rep,"data","stanford-glove","khodakA.rds"))

# confirm transformation matrix is 300 x 300
stopifnot(nrow(transform_matrix) == 300 & ncol(transform_matrix) == 300)

```

### Analysis: Differences in word meanings by gender and party

#### Preprocessing

```{r }
#| warning: false
#| output: asis
#| code-fold: false

cr_toks <- tokens(cr_corpus, remove_punct = T, remove_symbols = T, remove_numbers = T, remove_url = T, remove_separators = T)

```

#### conText Regressions

```{r }
#| warning: false
#| output: asis
#| code-fold: false

# define target words
targets <- c('and', 'but', 'also', 'abortion', 'marriage', 'immigration')

# initialize model vectors
models <- vector('list', length = length(targets)) %>% setNames(targets)

# run conText regressions
set.seed(2022L)
for(target in targets){
  
  # too many instances of these stopwords, too slow. we use a sample instead.
  if(target %in% c('and','but','also')){
    
    model1 <- conText(formula =  as.formula(paste0(target, ' ~ party + gender')), 
                      data = tokens_sample(cr_toks, size = 0.05*length(cr_toks), replace = FALSE), 
                      pre_trained = pre_trained, 
                      transform = TRUE, 
                      transform_matrix = transform_matrix, 
                      bootstrap = TRUE, 
                      jackknife = FALSE,
                      num_bootstraps = 100, 
                      stratify = TRUE, 
                      permute = TRUE, 
                      num_permutations = 100, 
                      window = 6L, 
                      valuetype = 'fixed', 
                      case_insensitive = TRUE, 
                      hard_cut = FALSE, 
                      verbose = FALSE)
  }
  
  else{
    
    model1 <- conText(formula =  as.formula(paste0(target, ' ~ party + gender')), 
                      data = cr_toks, 
                      pre_trained = pre_trained, 
                      transform = TRUE, 
                      transform_matrix = transform_matrix, 
                      bootstrap = TRUE, 
                      jackknife = FALSE,
                      num_bootstraps = 100, 
                      stratify = TRUE, 
                      permute = TRUE, 
                      num_permutations = 100, 
                      window = 6L, 
                      valuetype = 'fixed', 
                      case_insensitive = TRUE, 
                      hard_cut = FALSE, 
                      verbose = FALSE)
  }
  
  model1@normed_coefficients %>% kable_style()
  
  models[[target]] <- model1
  cat("done with", target, "\n")
  
}

normed_cofficients <- lapply(targets, function(target) cbind(target = target, models[[target]]@normed_coefficients)) %>% bind_rows()
normed_cofficients <- normed_cofficients %>% mutate(target = factor(target, levels = c('also', 'but', 'and', 'abortion', 'marriage', 'immigration')),
                                        coefficient = factor(coefficient, levels = c('party_R', 'gender_M')))

```

#### Difference in word meaning by party (figure 5)

```{r}
#| warning: false
#| output: asis
#| code-fold: false

ggplot(normed_cofficients, aes(coefficient, shape = coefficient)) +
  geom_pointrange(aes(x = target, y = normed.estimate,
                      ymin = lower.ci,
                      ymax = upper.ci), lwd = 1, position = position_dodge(width = 1/2), fill = "WHITE") +
  xlab('') +
  ylab(expression(paste('Norm of ', hat(beta),'s'))) +
  scale_shape_manual(values=c(2,20), labels = c("Republican", "Male")) +
  theme(axis.text.x = element_text(size=18, angle = 90, vjust = 0.5, hjust = 1),
        axis.text.y = element_text(size=18),
        axis.title.y = element_text(size=20, margin = margin(t = 0, r = 15, b = 0, l = 15)),
        legend.text=element_text(size=18),
        legend.title=element_blank(),
        legend.key=element_blank(),
        legend.position = "top",
        legend.spacing.x = unit(0.25, 'cm'),
        plot.margin=unit(c(1,1,0,0),"cm"))

```

#### Nearest neighbors

```{r}
#| warning: false
#| output: asis
#| code-fold: false

#---------------------------------
# nearest neighbors using model
#---------------------------------

# just for immigration as a function of party
model1 <- conText(formula =  immigration ~ party, 
                  data = cr_toks, 
                  pre_trained = pre_trained, 
                  transform = TRUE, 
                  transform_matrix = transform_matrix, 
                  bootstrap = TRUE, 
                  jackknife = FALSE,
                  num_bootstraps = 100, 
                  confidence_level = 0.95, 
                  stratify = TRUE, 
                  permute = TRUE, 
                  num_permutations = 100, 
                  window = 6L, 
                  valuetype = 'fixed', 
                  case_insensitive = TRUE, 
                  hard_cut = FALSE, 
                  verbose = FALSE)

# extract coefficients
immigrationR <- model1["(Intercept)",] + model1["party_R",]
immigrationD <- model1["(Intercept)",]

# nearest neighbors
nns_R <- nns(immigrationR, pre_trained = pre_trained, N = 10, candidates = model1@features, as_list = FALSE)
nns_D <- nns(immigrationD, pre_trained = pre_trained, N = 10, candidates = model1@features, as_list = FALSE)

nns_R %>% kable_style()
nns_D %>% kable_style()

```

#### Nearest contexts

```{r}
#| warning: false
#| output: asis
#| code-fold: false

# tokenize docs
immig_toks <- tokens_context(cr_toks, pattern = 'immigration', window = 6L, hard_cut = FALSE)

# build dfm
immig_dfm <- dfm(immig_toks)

# build dem
immig_dem <- dem(x = immig_dfm, pre_trained = pre_trained, transform = TRUE, transform_matrix = transform_matrix, verbose = TRUE)

# compute ALC embeddings for each party
immig_wv_party <- dem_group(immig_dem, groups = immig_dem@docvars$party)

# find nearest contexts (limit each party's ncs to their own contexts)
ncs_R <- ncs(x = immig_wv_party["R",], 
             contexts_dem = immig_dem[immig_dem@docvars$party == "R",], 
             contexts = immig_toks[docvars(immig_toks, 'party') == "R",], 
             N = 5, 
             as_list = FALSE)

ncs_D <- ncs(x = immig_wv_party["D",], 
             contexts_dem = immig_dem[immig_dem@docvars$party == "D",], 
             contexts = immig_toks[docvars(immig_toks, 'party') == "D",], 
             N = 5, 
             as_list = FALSE)

ncs_R %>% kable_style()
ncs_D %>% kable_style()

```

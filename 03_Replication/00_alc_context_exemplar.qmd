---
title: "Replication Code: A Replication of _Embedding Regression: Models for Context-Specific Description and Inference_ (Rodriguez et al., 2023)"
subtitle: "Analysis of Trump semantic shift"
author: "Bridgette Sullivan & Maria Bartlett"
date: "`r Sys.Date()`"
format: html
theme: litera
toc: TRUE
toc-location: left
toc-depth: 7
embed-resources: TRUE
linkcolor: "black"
editor: visual
fontsize: 12pt
css: bootstrap.css
page-layout: full
---

### Set-up

```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE

# clear global environment
rm(list = ls())

# set seed
set.seed(12345)

# provide instruction for how to install user-written packages
#devtools::install_github("prodriguezsosa/conText")

# load packages
library(tidyverse)
library(conText)
library(quanteda)
library(kableExtra)

# set processing/display options
options(mc.cores = parallel::detectCores())
options(dplyr.summarise.inform = FALSE)
options(warn = -1)

# set relative paths
root       <- file.path(getwd() %>% dirname())
author_rep <- file.path(root,"02_DataverseMaterials","dataverse_files")

# define kable styling options
kable_style <- function(df) {
  
  df %>%
  kbl(full_width = T, 
      align = "l",
      booktabs = T) %>%
  kable_styling(latex_options = c("repeat_header","scale_down","HOLD_position")) 
}

```

### Load data

```{r}
#| warning: false
#| output: asis
#| code-fold: false

# --------------------------------
# load data
# --------------------------------

# nyt corpus
corpus_nyt <- readRDS(file.path(author_rep,"data","nyt_data.rds"))

# in 2018 lead_paragraph is missing
corpus_nyt$lead_paragraph[is.na(corpus_nyt$lead_paragraph)] <- corpus_nyt$snippet[is.na(corpus_nyt$lead_paragraph)] 

# pre-trained GloVe embeddings 
pre_trained <- readRDS(file.path(author_rep,"data","stanford-glove","glove.rds"))

# confirm GloVe is comprised of 300-dimension embeddings for 400,000 tokens
stopifnot(nrow(pre_trained) == 400000 & ncol(pre_trained) == 300)
 
# pre-trained transformation matrix (A_hat)
transform_matrix <- readRDS(file.path(author_rep,"data","stanford-glove","khodakA.rds"))

# confirm transformation matrix is 300 x 300
stopifnot(nrow(transform_matrix) == 300 & ncol(transform_matrix) == 300)

```

### Analysis: Semantic shift of Trump

#### Preprocessing

```{r}
#| warning: false
#| output: asis
#| code-fold: false

# targets
targets <- c('Trump', 'Clinton')

# keep only documents where the target words appear
trump_corpus <- corpus_nyt[grep('Trump', corpus_nyt$lead_paragraph, fixed = TRUE, ignore.case = FALSE), 
                           c('lead_paragraph', 'year')] %>% 
  distinct(lead_paragraph, .keep_all = TRUE) %>% 
  filter(year %in% c(2011:2014,2017:2020)) %>% 
  rename(text = lead_paragraph) %>% 
  mutate(target = 'trump', 
         year = as.integer(year)) # uppercase matters here

clinton_corpus <- corpus_nyt[grep('Clinton', corpus_nyt$lead_paragraph, fixed = TRUE, ignore.case = FALSE), 
                             c('lead_paragraph', 'year')] %>% 
  distinct(lead_paragraph, .keep_all = TRUE) %>% 
  filter(year %in% c(2011:2014,2017:2020)) %>% 
  rename(text = lead_paragraph) %>% 
  mutate(target = 'clinton', 
         year = as.integer(year)) # uppercase matters here

sub_corpus <- rbind(trump_corpus, clinton_corpus)

# basic preprocessing of text
sub_corpus$text <- sub_corpus$text %>%
  gsub('Trump', 'toi', .) %>% # replace mentions of Trump with TOI (target of interest)
  gsub('Clinton', 'toi', .) %>% # replace mentions of Clinton with TOI (target of interest)
  gsub('LEAD:', '', .) %>% # remove header banner
  gsub("[^[:alpha:]]", " ", .) %>% # remove all non-alpha characters
  str_replace_all("\\b\\w{1,2}\\b", "") %>% # remove 1-2 letter words
  str_replace_all("^ +| +$|( ) +", "\\1") %>% # remove excess white space
  tolower() # lowercase

```

#### conText regression

```{r}
#| warning: false
#| output: asis
#| code-fold: false

# add dummy variables distinguishing pre-/post-election years and trump/clinton mentions
sub_corpus <- sub_corpus %>% mutate(post_election = if_else(year>2014, 1L, 0L))
sub_corpus <- sub_corpus %>% mutate(trump = if_else(target == 'trump', 1L, 0L))
sub_corpus <- sub_corpus %>% mutate(interaction = trump*post_election)

# transform into quanteda corpus
sub_corpus <- corpus(sub_corpus$text, docvars = sub_corpus[,c("year", "target", "post_election", "trump", "interaction")])
toks <- tokens(sub_corpus)

# run regression
set.seed(2022L)

model1 <- conText(formula =  toi ~ trump + post_election + interaction, 
                  data = toks, 
                  pre_trained = pre_trained, 
                  transform = TRUE, 
                  transform_matrix = transform_matrix, 
                  bootstrap = TRUE, 
                  jackknife = FALSE,  # MB update: needed to explicitly update to jackknife = FALSE (default is true; can't run both jackknife & bootstrap)
                  num_bootstraps = 1000, 
                  confidence_level = 0.95, 
                  stratify = TRUE, 
                  permute = TRUE, 
                  num_permutations = 100, 
                  window = 6, 
                  valuetype = 'fixed', 
                  case_insensitive = TRUE, 
                  hard_cut = FALSE, 
                  verbose = FALSE)

# read results
model1@normed_coefficients %>%
  kable_style()

```

#### Coefficient plot

```{r}
#| warning: false
#| output: asis
#| code-fold: false

# coefficient plot
plot_tibble <- model1@normed_coefficients %>% 
  mutate(coefficient = c("Trump", "Post_Election", "Trump x \n Post_Election")) %>% 
  mutate(coefficient = factor(coefficient, levels = coefficient))

ggplot(plot_tibble, aes(x = coefficient, y = normed.estimate)) +
  geom_pointrange(aes(ymin = lower.ci, ymax = upper.ci), size = 1) +
  labs(y = expression(paste('Norm of ', hat(beta),'s'))) +
  geom_text(aes(label=c('***', '***', '***')), position=position_dodge(width=0.9), hjust=0.5, vjust = c(0, 0, 0), size = 8) +
  coord_flip() +
  ylim(0,0.6) +
  theme(axis.text.x = element_text(size=18, vjust = 0.5, margin = margin(t = 15, r = 0, b = 15, l = 0)),
        axis.text.y = element_text(size=18),
        axis.title.y = element_blank(),
        axis.title.x = element_text(size=20),
        plot.margin=unit(c(1,1,0,0),"cm"))

```
